// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GalaIO/herewe-distributed/raft (interfaces: RpcClient,RpcServer)

// Package raft is a generated GoMock package.
package raft

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRpcClient is a mock of RpcClient interface.
type MockRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockRpcClientMockRecorder
}

// MockRpcClientMockRecorder is the mock recorder for MockRpcClient.
type MockRpcClientMockRecorder struct {
	mock *MockRpcClient
}

// NewMockRpcClient creates a new mock instance.
func NewMockRpcClient(ctrl *gomock.Controller) *MockRpcClient {
	mock := &MockRpcClient{ctrl: ctrl}
	mock.recorder = &MockRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpcClient) EXPECT() *MockRpcClientMockRecorder {
	return m.recorder
}

// SendAppendEntries mocks base method.
func (m *MockRpcClient) SendAppendEntries(arg0 context.Context, arg1 *AppendEntriesParams, arg2 RepPeer) (*AppendEntriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppendEntries", arg0, arg1, arg2)
	ret0, _ := ret[0].(*AppendEntriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAppendEntries indicates an expected call of SendAppendEntries.
func (mr *MockRpcClientMockRecorder) SendAppendEntries(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppendEntries", reflect.TypeOf((*MockRpcClient)(nil).SendAppendEntries), arg0, arg1, arg2)
}

// SendRequestVote mocks base method.
func (m *MockRpcClient) SendRequestVote(arg0 context.Context, arg1 *ReqVoteParams, arg2 RepPeer) (*ReqVoteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequestVote", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ReqVoteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequestVote indicates an expected call of SendRequestVote.
func (mr *MockRpcClientMockRecorder) SendRequestVote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequestVote", reflect.TypeOf((*MockRpcClient)(nil).SendRequestVote), arg0, arg1, arg2)
}

// MockRpcServer is a mock of RpcServer interface.
type MockRpcServer struct {
	ctrl     *gomock.Controller
	recorder *MockRpcServerMockRecorder
}

// MockRpcServerMockRecorder is the mock recorder for MockRpcServer.
type MockRpcServerMockRecorder struct {
	mock *MockRpcServer
}

// NewMockRpcServer creates a new mock instance.
func NewMockRpcServer(ctrl *gomock.Controller) *MockRpcServer {
	mock := &MockRpcServer{ctrl: ctrl}
	mock.recorder = &MockRpcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpcServer) EXPECT() *MockRpcServerMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method.
func (m *MockRpcServer) AppendEntries(arg0 context.Context, arg1 *AppendEntriesParams) (*AppendEntriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEntries", arg0, arg1)
	ret0, _ := ret[0].(*AppendEntriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntries indicates an expected call of AppendEntries.
func (mr *MockRpcServerMockRecorder) AppendEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockRpcServer)(nil).AppendEntries), arg0, arg1)
}

// RequestVote mocks base method.
func (m *MockRpcServer) RequestVote(arg0 context.Context, arg1 *ReqVoteParams) (*ReqVoteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVote", arg0, arg1)
	ret0, _ := ret[0].(*ReqVoteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockRpcServerMockRecorder) RequestVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockRpcServer)(nil).RequestVote), arg0, arg1)
}

// Start mocks base method.
func (m *MockRpcServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRpcServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRpcServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockRpcServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRpcServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRpcServer)(nil).Stop))
}

// mustEmbedUnimplementedReplicaServiceServer mocks base method.
func (m *MockRpcServer) mustEmbedUnimplementedReplicaServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedReplicaServiceServer")
}

// mustEmbedUnimplementedReplicaServiceServer indicates an expected call of mustEmbedUnimplementedReplicaServiceServer.
func (mr *MockRpcServerMockRecorder) mustEmbedUnimplementedReplicaServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedReplicaServiceServer", reflect.TypeOf((*MockRpcServer)(nil).mustEmbedUnimplementedReplicaServiceServer))
}
